
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firebaseUID: 'firebaseUID',
  email: 'email',
  name: 'name',
  phone: 'phone',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  location: 'location',
  isActive: 'isActive',
  verified: 'verified',
  profileImage: 'profileImage'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  totalBookings: 'totalBookings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  businessName: 'businessName',
  bio: 'bio',
  services: 'services',
  serviceCategories: 'serviceCategories',
  experience: 'experience',
  available: 'available',
  rating: 'rating',
  totalReviews: 'totalReviews',
  completedBookings: 'completedBookings',
  isApproved: 'isApproved',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  color: 'color',
  image: 'image',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  price: 'price',
  originalPrice: 'originalPrice',
  discount: 'discount',
  duration: 'duration',
  description: 'description',
  image: 'image',
  requirements: 'requirements',
  tags: 'tags',
  isActive: 'isActive'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  bookingNumber: 'bookingNumber',
  customerId: 'customerId',
  providerId: 'providerId',
  serviceId: 'serviceId',
  customerAddressId: 'customerAddressId',
  providerAddressId: 'providerAddressId',
  scheduledDate: 'scheduledDate',
  scheduledTime: 'scheduledTime',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  paymentStatus: 'paymentStatus',
  specialInstructions: 'specialInstructions',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  providerId: 'providerId',
  customerId: 'customerId',
  serviceId: 'serviceId',
  rating: 'rating',
  comment: 'comment',
  images: 'images',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  amount: 'amount',
  platformFee: 'platformFee',
  providerEarning: 'providerEarning',
  paymentMethod: 'paymentMethod',
  paymentGateway: 'paymentGateway',
  transactionId: 'transactionId',
  status: 'status',
  paidAt: 'paidAt',
  createdAt: 'createdAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  type: 'type',
  label: 'label',
  street: 'street',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  latitude: 'latitude',
  longitude: 'longitude',
  isDefault: 'isDefault',
  customerId: 'customerId',
  providerId: 'providerId'
};

exports.Prisma.AvailabilitySlotScalarFieldEnum = {
  id: 'id',
  day: 'day',
  isAvailable: 'isAvailable',
  slots: 'slots',
  providerId: 'providerId'
};

exports.Prisma.ProviderDocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  documentUrl: 'documentUrl',
  providerId: 'providerId'
};

exports.Prisma.BankDetailsScalarFieldEnum = {
  id: 'id',
  accountNumber: 'accountNumber',
  ifscCode: 'ifscCode',
  accountHolderName: 'accountHolderName',
  providerId: 'providerId'
};

exports.Prisma.PreferencesScalarFieldEnum = {
  id: 'id',
  preferredProviders: 'preferredProviders',
  favoriteServices: 'favoriteServices',
  minPrice: 'minPrice',
  maxPrice: 'maxPrice',
  preferredTimeSlots: 'preferredTimeSlots',
  customerId: 'customerId'
};

exports.Prisma.PricingScalarFieldEnum = {
  id: 'id',
  servicePrice: 'servicePrice',
  discount: 'discount',
  finalPrice: 'finalPrice',
  platformFee: 'platformFee',
  totalAmount: 'totalAmount',
  bookingId: 'bookingId'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  methodId: 'methodId',
  bookingId: 'bookingId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  CUSTOMER: 'CUSTOMER',
  PROVIDER: 'PROVIDER',
  ADMIN: 'ADMIN'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Customer: 'Customer',
  Provider: 'Provider',
  ServiceCategory: 'ServiceCategory',
  Service: 'Service',
  Booking: 'Booking',
  Review: 'Review',
  Payment: 'Payment',
  Address: 'Address',
  AvailabilitySlot: 'AvailabilitySlot',
  ProviderDocument: 'ProviderDocument',
  BankDetails: 'BankDetails',
  Preferences: 'Preferences',
  Pricing: 'Pricing',
  PaymentMethod: 'PaymentMethod'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
